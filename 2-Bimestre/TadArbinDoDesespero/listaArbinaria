#include <stdio.h>
#include <stdlib.h>
#define MAX 100

typedef int TipoA;
typedef struct NoArbin{
    TipoA info;
    struct NoArbin *esq, *dir;
} NoArbin, *Arbin ;

typedef int TipoL;
typedef struct ListaNo
{
    TipoL info;
    struct ListaNo *prox;
} * pListaNo;
typedef struct TLista
{
    pListaNo primeiro, ultimo, iterador;
    int longitude;
} * Lista;

typedef Arbin TipoF;
typedef struct{
    TipoF info[MAX];
    int primeiro;
    int ultimo;
} TFila, *Fila;

/*TAD Lista com info sendo Arbin*/

Lista inicLista()
{
    Lista lst;
    lst = (Lista)malloc(sizeof(struct TLista));
    lst->longitude = 0;
    lst->iterador = NULL;
    lst->primeiro = NULL;
    lst->ultimo = NULL;
    return lst;
}
void primLista(Lista lst)
{
    lst->iterador = lst->primeiro;
}
void ultLista(Lista lst)
{
    lst->iterador = lst->ultimo;
}
void posLista(Lista lst, int pos)
{
    if (lst->longitude > 0 && pos >= 1 && pos <= lst->longitude)
    {
        int i;
        for (i = 1, lst->iterador = lst->primeiro; i < pos; i++, lst->iterador = lst->iterador->prox)
        {
        }
    }
    else
    {
        lst->iterador = NULL;
    }
}
int fimLista(Lista lst)
{
    return (lst->iterador == NULL);
}
void segLista(Lista lst)
{
    if (lst->iterador == NULL)
    {
        printf("Iterador indefindio \n");
    }
    else
    {
        lst->iterador = lst->iterador->prox;
    }
}
TipoL infoLista(Lista lst)
{
    if (lst->iterador == NULL)
    {
        printf("Iterador indefinido \n");
        return NULL;
    }
    else
        return lst->iterador->info;
}
int longLista(Lista lst)
{
    return lst->longitude;
}
void anxLista(Lista lst, TipoL elem)
{
    if (lst->iterador == NULL && lst->longitude > 0)
    {
        printf("Iterador indefinido e lista cheia.\n");
    }
    else
    {
        pListaNo novoNo = (pListaNo)malloc(sizeof(struct ListaNo));
        novoNo->info = elem;
        novoNo->prox = NULL;
        if (lst->longitude == 0)
        {
            lst->primeiro = novoNo;
            lst->ultimo = novoNo;
            lst->iterador = novoNo;
            lst->longitude++;
        }
        else if (lst->iterador == lst->ultimo)
        {
            lst->iterador->prox = novoNo;
            lst->ultimo = novoNo;
            lst->iterador = novoNo;
            lst->longitude++;
        }
        else
        {
            novoNo->prox = lst->iterador->prox;
            lst->iterador->prox = novoNo;
            lst->iterador = novoNo;
            lst->longitude++;
        }
    }
}

/* TAD Fila com info sendo uma Arbin */

Fila inicFila(void){

	Fila f = (Fila)malloc(sizeof(TFila));
	f->primeiro = f->ultimo = -1;
	return f;
}
void adicFila(Fila f, TipoF elem){

	if(f->primeiro == -1){
		f->info[0] = elem;
		f->primeiro = f->ultimo = 0;
	}
	else if(!(((f->ultimo + 1)%MAX)== f->primeiro)){
		f->ultimo = (f->ultimo + 1)%MAX;
		f->info[f->ultimo] = elem;
	}
}
void elimFila(Fila f){
	if(f->primeiro != -1){
		if(f->primeiro == f->ultimo){
			f->primeiro = f->ultimo = -1;
		}
		else{
			f->primeiro = (f->primeiro + 1)%MAX;
		}
	}
}

TipoF infoFila(Fila f){ // fila deve estar cheia
	return f->info[f->primeiro];
}

int vaziaFila(Fila f){
	return (f->primeiro == -1 && f->ultimo == -1);
}

void destruirFila(Fila f){
	free(f);
}

/* TAD Arvore Binaria */

Arbin inicArbin(){
    return NULL;
}

Arbin esqArbin(Arbin a){
    return a->esq;
}

Arbin dirArbin(Arbin a){
    return a->dir;
}

TipoA raizArbin(Arbin a){
    return a->info;
}

int vaziaArbin(Arbin a){
    if(a == NULL)
        return 1;
    return 0;
}

void destruirArbin( Arbin a){
    if(a != NULL){
        destruirArbin(a->esq);
        destruirArbin(a->dir);
        free(a);
    }
}

void visitar(TipoA elem){
	printf("  %d  \n",  elem);
}

void preOrdemArbin(Arbin a){
	if(!vaziaArbin(a)){
		visitar(raizArbin(a));
		preOrdemArbin(esqArbin(a));
		preOrdemArbin(dirArbin(a));
	}
}

void inOrdemArbin(Arbin a){
	if(!vaziaArbin(a)){
		inOrdemArbin(esqArbin(a));
		visitar(raizArbin(a));
		inOrdemArbin(dirArbin(a));
	}
}

void posOrdemArbin(Arbin a){
	if(!vaziaArbin(a)){
		posOrdemArbin(esqArbin(a));
		posOrdemArbin(dirArbin(a));
        visitar(raizArbin(a));
	}
}

/*Lista de Exercícios Arvore Binaria*/

/*1*/ int pesoArbin( Arbin a);
/*2*/ int estaArbin( Arbin a, TipoA elem);
/*3*/ int numFolhas( Arbin a);
/*4*/ int numOcorrencias( Arbin a, TipoA elem);
/*5*/ int existeCaminho( Arbin a, TipoA e1, TipoA e2);
/*6*/ int contNivel( Arbin a, int nivel);
/*7*/ int semelhantesArbin( Arbin a1, Arbin a2);
/*8   Desenhe duas árvores isomorfas e semelhantes, que não sejam iguais.
  9   Determine os seguintes valores para uma árvore binária:
        a) Número mínimo e máximo de elementos de uma árvore completa de N níveis
        b) Número mínimo de níveis de uma árvore binária com peso P.
        c) Número máximo de folhas de uma árvore binária com N níveis.
        d) Número mínimo e máximo de elementos presentes no nível N de uma Arbin completa de altura H.
        e) Número de elementos de uma Arbin cheia de N níveis
  10*/ int alturaArbin( Arbin a);
/*11*/ int iguaisArbin(Arbin a, Arbin b);
/*12*/ int isomorfos(Arbin a1, Arbin a2);
/*13*/ int completaArbin(Arbin a);
/*14*/ int cheiaArbin(Arbin a);
/*15*/ Lista buscaCaminhoArbin(Arbin a, TipoA elem);
/*16*/ int ocorreArbin(Arbin a1, Arbin a2);
/*17   Reconstruir a Arbin com os seguintes caminhamentos:
        a)pre-ordem: 10-20-30-50-60-40-70-80-90
        in-ordem: 50-30-60-20-80-70-90-40-10
        b)pre-ordem: 60-30-80-70-40-20-50-90-10
        in-ordem: 30-60-20-80-70-40-10-90-50
  18*/ int nivelArbin(Arbin a1, TipoA elem);
/*19*/ int maiorElementoArbin(Arbin a);




// Exercício 1
int pesoArbin(Arbin a){
    if(a == NULL)
        return 0;
    return (1 + pesoArbin(a->esq) + pesoArbin(a->dir));
}
// Exercício 2
int estaArbin(Arbin a, TipoA elem){
    if(a == NULL)
        return 0;
    if(raizArbin(a) == elem)
        return 1;
    return (estaArbin(a->esq, elem) || estaArbin(a->dir, elem));
}
// Exercício 3
int numFolhas(Arbin a){
    if(a == NULL)
        return 0;
    else if (!vaziaArbin(a->esq) && !vaziaArbin(a->dir))
        return (numFolhas(a->esq) + numFolhas(a->dir));
    return 1;
}
// Exercício 4
int numOcorrencias( Arbin a, TipoA elem){
    if(a == NULL)
        return 0;
    if(raizArbin(a) == elem)
        return 1;
    return (numOcorrencias(a->esq, elem) + numOcorrencias(a->dir, elem));
}
// Exercício 5
int existeCaminho(Arbin a, TipoA e1, TipoA e2){
    if(a == NULL)
        return 0;
    if (raizArbin(a) == e1)
        return estaArbin(a, e2);
    if(e1 < raizArbin(a))
        return existeCaminho(a->esq, e1, e2);
    return existeCaminho(a->dir, e1, e2);
}
// Exercício 6
int contNivel(Arbin a, int nivel){
    if(a == NULL)
        return 0;
    if(nivel == 0)
        return 1;
    return (contNivel(a->esq, nivel-1) + contNivel(a->dir, nivel-1));
}
// Exercício 7
int semelhantesArbin( Arbin a1, Arbin a2){
    if(pesoArbin(a1) == pesoArbin(a2))
        return 0;
    Fila f;
    Arbin arb;
    if(!vaziaArbin(a1))
    {
        f = inicFila();
        adicFila(f, a1);
        while(!vaziaFila(f)){
            arb = infoFila(f);
            elimFila(f);
            if(!vaziaArbin(arb)){
                if(!estaArbin(a2, raizArbin(a1)))
                    return 0;
                adicFila(f, esqArbin(a1));
                adicFila(f, dirArbin(a1));
            }
        }
    }
    else if(vaziaArbin(a2))
        return 1;
    return 0;
}
// Exercício 8
/*
          1                             2
        /    \                        /   \
       2      3                     1      3
      / \     / \                  /  \   / \
     4    5  6   7                4   5   6  7
*/
// Exercício 9
/*
    a) Número mínimo e máximo de elementos de uma árvore completa de N níveis
    b) Número mínimo de níveis de uma árvore binária com peso P.
    c) Número máximo de folhas de uma árvore binária com N níveis.
    d) Número mínimo e máximo de elementos presentes no nível N de uma Arbin completa de altura H.
    e) Número de elementos de uma Arbin cheia de N níveis
*/
// Exercício 10
int alturaArbin( Arbin a){
    int he, hd;
    if(vaziaArbin(a))
        return -1;
    he = alturaArbin(esqArbin(a));
    hd = alturaArbin(dirArbin(a));
    return (he > hd) ? he + 1: hd + 1;
}
// Exercício 11
int iguaisArbin(Arbin a, Arbin b){
    if(vaziaArbin(a) && vaziaArbin(b))
        return 1;
    if(raizArbin(a) == raizArbin(b))
        return (iguaisArbin(a->esq, b->esq) && iguaisArbin(a->dir, b->dir));
    else
        return 0;
}
// Exercício 12
int isomorfos(Arbin a1, Arbin a2){
    if(pesoArbin(a1)&& pesoArbin(a2)&&(estaArbin(a1,a2->info) || estaArbin(a2,a1->info)))
        return 1;
    else
        return 0;
}
// Exercício 13
int completaArbin(Arbin a){
    if(!vaziaArbin(a))
    {
        if(numFolhas(esqArbin(a))== numFolhas(dirArbin(a)))
            return 1;
    }
    else if(!vaziaArbin(a) && pesoArbin(esqArbin(a)) == pesoArbin(dirArbin(a)))
        return  completaArbin(esqArbin(a))&& completaArbin(dirArbin(a));
    return 0;
}
// Exercício 14
int cheiaArbin(Arbin a){
    if(vaziaArbin(a))
        return 0;
    else
        return 1;
}
// Exercício 15
Lista buscaCaminhoArbin(Arbin a, int elem){
    Lista lst =  inicLista();
    while(!vaziaArbin(a)){
        anxLista(lst, raizArbin(a));
    }
    return lst;
}
// Exercício 16
int ocorreArbin(Arbin a1, Arbin a2){
    if(vaziaArbin(a1) && vaziaArbin(a2))
        return 0;
    if(!vaziaArbin(a1) && !vaziaArbin(a2) && estaArbin(a1,raizArbin(a2)))
        return 1;
    else
        return ocorreArbin(a1,a2);
}
// Exercício 17
/*
a)pre-ordem: 10-20-30-50-60-40-70-80-90
  in-ordem: 50-30-60-20-80-70-90-40-10

                     10
                    /   \
                  20
                /    \
              30      40
             /  \    /  \
            50  60  70
                   /  \
                  80   90

b)pre-ordem: 60-30-80-70-40-20-50-90-10
  in-ordem: 30-60-20-80-70-40-10-90-50

                   60
                  /   \
                 30    80
                      /   \
                     20     70
                              \
                               40
                              /   \
                             90    50
                            /
                           10
*/
// Exercício 18
int nivelArbin(Arbin a, TipoA elem){
    if(!estaArbin(a, elem))
        return -1;
    if(vaziaArbin(a))
        return 0;
    if(!vaziaArbin(a) && !estaArbin(a,raizArbin(esqArbin(a))))
        return contNivel(a, alturaArbin(a->esq)) && contNivel(a,a->dir);
    else{
        return -1;
        Fila f;
        Arbin arb;
        if(!vaziaArbin(a))
        {
            f = inicFila();
            adicFila(f, a);
            while(!vaziaFila(f))
            {
                arb = infoFila(f);
                elimFila(f);
                if( !vaziaArbin(arb)){
                    visitar(raizArbin(arb));
                    adicFila(f, esqArbin(arb));
                    adicFila(f, dirArbin(arb));
                }
            }
        }
    }
}
// Exercício 19
int maiorElementoArbin(Arbin a){
    int maiorEsq = raizArbin(a);
    int maiorDir = raizArbin(a);
    int maior = raizArbin(a);;
    if(!vaziaArbin(a))
    {
        if(esqArbin(a))
        {
            if(maiorEsq>raizArbin(a))
                maiorEsq = raizArbin(a);
        }
        if(dirArbin(a))
        {
            if(maiorDir>raizArbin(a))
                maiorDir  = raizArbin(a);
        }

    }
    if(maiorEsq>maiorDir)
        maior = maiorEsq;
    else if(maiorDir > maiorEsq)
        maior = maiorDir;
    return maior;
}

int main()
{
    printf("Hello world!\n");
    return 0;
}
